--- /home/gaissmai/projects/go-inet/inet/block.go	2019-10-08 20:12:35.278991793 +0200
+++ /home/gaissmai/projects/go-inet/inet/block.go.31933.renamed	2019-10-08 20:58:52.058302460 +0200
@@ -239,8 +239,8 @@
 	return a.Base.Version()
 }
 
-// Size returns the minimum size in bits to represent the block.
-func (a Block) Size() int {
+// BitLen returns the minimum size in bits to represent the block.
+func (a Block) BitLen() int {
 	// algorithm: use math.big.BitLen(lastIP-baseIP)
 	ip := a.Last
 	ip = ip.SubBytes(a.Base.Bytes())
@@ -447,7 +447,7 @@
 	}
 
 	// bits for hostmask
-	size := a.Size()
+	size := a.BitLen()
 
 	// netmask is inverse of hostmask, bits-size
 	mask := setBytes(net.CIDRMask(bits-size, bits))
@@ -486,7 +486,7 @@
 
 	// stop condition, cursor > end
 	for cursor.Compare(end) <= 0 {
-		size := Block{Base: cursor, Last: end}.Size()
+		size := Block{Base: cursor, Last: end}.BitLen()
 		mask := setBytes(net.CIDRMask(bits-size, bits))
 
 		// find matching size/mask at cursor position
--- /home/gaissmai/projects/go-inet/inet/example_block_test.go	2019-10-08 20:11:19.330184594 +0200
+++ /home/gaissmai/projects/go-inet/inet/example_block_test.go.31933.renamed	2019-10-08 20:58:52.062302479 +0200
@@ -198,9 +198,9 @@
 		"2001:db8::1-2001:db8::ffec",
 	} {
 		a := inet.MustBlock(s)
-		fmt.Printf("%-30v size min. %d bits\n", a, a.Size())
+		fmt.Printf("%-30v size min. %d bits\n", a, a.BitLen())
 
-		if a.Size() < 21 {
+		if a.BitLen() < 21 {
 			fmt.Printf("%-30v len %s IPs\n", a, a.Len())
 		}
 	}
